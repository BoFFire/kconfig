// This file is generated by kconfig_compiler_kf5 from test_signal.kcfg.
// All changes you do to this file will be lost.
#ifndef TESTSIGNAL_H
#define TESTSIGNAL_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class TestSignal : public KConfigSkeleton
{
  Q_OBJECT
  public:

    static TestSignal *self();
    ~TestSignal();

    /**
      Set Current emoticon theme.
    */
    static
    void setEmoticonTheme( const QString & v )
    {
      if (v != self()->mEmoticonTheme && !self()->isImmutable( QStringLiteral( "emoticonTheme" ) )) {
        self()->mEmoticonTheme = v;
        self()->mSettingsChanged |= signalEmoticonSettingsChanged;
      }
    }

    /**
      Get Current emoticon theme.
    */
    static
    QString emoticonTheme()
    {
      return self()->mEmoticonTheme;
    }

    /**
      Set Enable emoticon support in Kopete.
    */
    static
    void setUseEmoticon( bool v )
    {
      if (v != self()->mUseEmoticon && !self()->isImmutable( QStringLiteral( "useEmoticon" ) )) {
        self()->mUseEmoticon = v;
        self()->mSettingsChanged |= signalEmoticonSettingsChanged;
      }
    }

    /**
      Get Enable emoticon support in Kopete.
    */
    static
    bool useEmoticon()
    {
      return self()->mUseEmoticon;
    }

    /**
      Set Use strict mode in emoticon parsing.
    */
    static
    void setEmoticonRequireSpace( bool v )
    {
      if (v != self()->mEmoticonRequireSpace && !self()->isImmutable( QStringLiteral( "emoticonRequireSpace" ) )) {
        self()->mEmoticonRequireSpace = v;
        self()->mSettingsChanged |= signalEmoticonSettingsChanged;
      }
    }

    /**
      Get Use strict mode in emoticon parsing.
    */
    static
    bool emoticonRequireSpace()
    {
      return self()->mEmoticonRequireSpace;
    }

    /**
      Set Absolute path to a directory containing a Adium/Kopete chat window style.
    */
    static
    void setStylePath( const QString & v )
    {
      if (v != self()->mStylePath && !self()->isImmutable( QStringLiteral( "stylePath" ) )) {
        self()->mStylePath = v;
        self()->mSettingsChanged |= signalStyleChanged;
      }
    }

    /**
      Get Absolute path to a directory containing a Adium/Kopete chat window style.
    */
    static
    QString stylePath()
    {
      return self()->mStylePath;
    }

    /**
      Set Relative path to a CSS variant for the current style.
    */
    static
    void setStyleCSSVariant( const QString & v )
    {
      if (!self()->isImmutable( QStringLiteral( "StyleCSSVariant" ) ))
        self()->mStyleCSSVariant = v;
    }

    /**
      Get Relative path to a CSS variant for the current style.
    */
    static
    QString styleCSSVariant()
    {
      return self()->mStyleCSSVariant;
    }


    enum {
      signalEmoticonSettingsChanged = 0x1,
      signalStyleChanged = 0x2
    };

  Q_SIGNALS:
    void emoticonSettingsChanged();

    /**
      Tell when a complete style change.
    */
    void styleChanged(const QString & stylePath, const QString & StyleCSSVariant);

  private:
    void itemChanged(quint64 flags);

  protected:
    TestSignal();
    friend class TestSignalHelper;

    bool usrSave() Q_DECL_OVERRIDE;

    // Appearance
    QString mEmoticonTheme;
    bool mUseEmoticon;
    bool mEmoticonRequireSpace;
    QString mStylePath;
    QString mStyleCSSVariant;

  private:
    uint mSettingsChanged;
};

#endif

