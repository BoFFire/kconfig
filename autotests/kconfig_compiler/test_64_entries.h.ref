// This file is generated by kconfig_compiler_kf5 from test_64_entries.kcfg.
// All changes you do to this file will be lost.
#ifndef TEST64ENTRIES_H
#define TEST64ENTRIES_H

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class Test64Entries : public KConfigSkeleton
{
  Q_OBJECT
  public:

    Test64Entries( );
    ~Test64Entries() override;

    /**
      Set key1
    */
    void setKey1( const QString & v )
    {
      if (v != mKey1 && !isKey1Immutable()) {
        mKey1 = v;
        Q_EMIT key1Changed();
      }
    }

    Q_PROPERTY(QString key1 READ key1 WRITE setKey1 NOTIFY key1Changed)
    Q_PROPERTY(bool isKey1Immutable READ isKey1Immutable CONSTANT)
    /**
      Get key1
    */
    QString key1() const
    {
      return mKey1;
    }

    /**
      Is key1 Immutable
    */
    bool isKey1Immutable() const
    {
      return isImmutable( QStringLiteral( "key1" ) );
    }

    /**
      Set key2
    */
    void setKey2( const QString & v )
    {
      if (v != mKey2 && !isKey2Immutable()) {
        mKey2 = v;
        Q_EMIT key2Changed();
      }
    }

    Q_PROPERTY(QString key2 READ key2 WRITE setKey2 NOTIFY key2Changed)
    Q_PROPERTY(bool isKey2Immutable READ isKey2Immutable CONSTANT)
    /**
      Get key2
    */
    QString key2() const
    {
      return mKey2;
    }

    /**
      Is key2 Immutable
    */
    bool isKey2Immutable() const
    {
      return isImmutable( QStringLiteral( "key2" ) );
    }

    /**
      Set key3
    */
    void setKey3( const QString & v )
    {
      if (v != mKey3 && !isKey3Immutable()) {
        mKey3 = v;
        Q_EMIT key3Changed();
      }
    }

    Q_PROPERTY(QString key3 READ key3 WRITE setKey3 NOTIFY key3Changed)
    Q_PROPERTY(bool isKey3Immutable READ isKey3Immutable CONSTANT)
    /**
      Get key3
    */
    QString key3() const
    {
      return mKey3;
    }

    /**
      Is key3 Immutable
    */
    bool isKey3Immutable() const
    {
      return isImmutable( QStringLiteral( "key3" ) );
    }

    /**
      Set key4
    */
    void setKey4( const QString & v )
    {
      if (v != mKey4 && !isKey4Immutable()) {
        mKey4 = v;
        Q_EMIT key4Changed();
      }
    }

    Q_PROPERTY(QString key4 READ key4 WRITE setKey4 NOTIFY key4Changed)
    Q_PROPERTY(bool isKey4Immutable READ isKey4Immutable CONSTANT)
    /**
      Get key4
    */
    QString key4() const
    {
      return mKey4;
    }

    /**
      Is key4 Immutable
    */
    bool isKey4Immutable() const
    {
      return isImmutable( QStringLiteral( "key4" ) );
    }

    /**
      Set key5
    */
    void setKey5( const QString & v )
    {
      if (v != mKey5 && !isKey5Immutable()) {
        mKey5 = v;
        Q_EMIT key5Changed();
      }
    }

    Q_PROPERTY(QString key5 READ key5 WRITE setKey5 NOTIFY key5Changed)
    Q_PROPERTY(bool isKey5Immutable READ isKey5Immutable CONSTANT)
    /**
      Get key5
    */
    QString key5() const
    {
      return mKey5;
    }

    /**
      Is key5 Immutable
    */
    bool isKey5Immutable() const
    {
      return isImmutable( QStringLiteral( "key5" ) );
    }

    /**
      Set key6
    */
    void setKey6( const QString & v )
    {
      if (v != mKey6 && !isKey6Immutable()) {
        mKey6 = v;
        Q_EMIT key6Changed();
      }
    }

    Q_PROPERTY(QString key6 READ key6 WRITE setKey6 NOTIFY key6Changed)
    Q_PROPERTY(bool isKey6Immutable READ isKey6Immutable CONSTANT)
    /**
      Get key6
    */
    QString key6() const
    {
      return mKey6;
    }

    /**
      Is key6 Immutable
    */
    bool isKey6Immutable() const
    {
      return isImmutable( QStringLiteral( "key6" ) );
    }

    /**
      Set key7
    */
    void setKey7( const QString & v )
    {
      if (v != mKey7 && !isKey7Immutable()) {
        mKey7 = v;
        Q_EMIT key7Changed();
      }
    }

    Q_PROPERTY(QString key7 READ key7 WRITE setKey7 NOTIFY key7Changed)
    Q_PROPERTY(bool isKey7Immutable READ isKey7Immutable CONSTANT)
    /**
      Get key7
    */
    QString key7() const
    {
      return mKey7;
    }

    /**
      Is key7 Immutable
    */
    bool isKey7Immutable() const
    {
      return isImmutable( QStringLiteral( "key7" ) );
    }

    /**
      Set key8
    */
    void setKey8( const QString & v )
    {
      if (v != mKey8 && !isKey8Immutable()) {
        mKey8 = v;
        Q_EMIT key8Changed();
      }
    }

    Q_PROPERTY(QString key8 READ key8 WRITE setKey8 NOTIFY key8Changed)
    Q_PROPERTY(bool isKey8Immutable READ isKey8Immutable CONSTANT)
    /**
      Get key8
    */
    QString key8() const
    {
      return mKey8;
    }

    /**
      Is key8 Immutable
    */
    bool isKey8Immutable() const
    {
      return isImmutable( QStringLiteral( "key8" ) );
    }

    /**
      Set key9
    */
    void setKey9( const QString & v )
    {
      if (v != mKey9 && !isKey9Immutable()) {
        mKey9 = v;
        Q_EMIT key9Changed();
      }
    }

    Q_PROPERTY(QString key9 READ key9 WRITE setKey9 NOTIFY key9Changed)
    Q_PROPERTY(bool isKey9Immutable READ isKey9Immutable CONSTANT)
    /**
      Get key9
    */
    QString key9() const
    {
      return mKey9;
    }

    /**
      Is key9 Immutable
    */
    bool isKey9Immutable() const
    {
      return isImmutable( QStringLiteral( "key9" ) );
    }

    /**
      Set key10
    */
    void setKey10( const QString & v )
    {
      if (v != mKey10 && !isKey10Immutable()) {
        mKey10 = v;
        Q_EMIT key10Changed();
      }
    }

    Q_PROPERTY(QString key10 READ key10 WRITE setKey10 NOTIFY key10Changed)
    Q_PROPERTY(bool isKey10Immutable READ isKey10Immutable CONSTANT)
    /**
      Get key10
    */
    QString key10() const
    {
      return mKey10;
    }

    /**
      Is key10 Immutable
    */
    bool isKey10Immutable() const
    {
      return isImmutable( QStringLiteral( "key10" ) );
    }

    /**
      Set key11
    */
    void setKey11( const QString & v )
    {
      if (v != mKey11 && !isKey11Immutable()) {
        mKey11 = v;
        Q_EMIT key11Changed();
      }
    }

    Q_PROPERTY(QString key11 READ key11 WRITE setKey11 NOTIFY key11Changed)
    Q_PROPERTY(bool isKey11Immutable READ isKey11Immutable CONSTANT)
    /**
      Get key11
    */
    QString key11() const
    {
      return mKey11;
    }

    /**
      Is key11 Immutable
    */
    bool isKey11Immutable() const
    {
      return isImmutable( QStringLiteral( "key11" ) );
    }

    /**
      Set key12
    */
    void setKey12( const QString & v )
    {
      if (v != mKey12 && !isKey12Immutable()) {
        mKey12 = v;
        Q_EMIT key12Changed();
      }
    }

    Q_PROPERTY(QString key12 READ key12 WRITE setKey12 NOTIFY key12Changed)
    Q_PROPERTY(bool isKey12Immutable READ isKey12Immutable CONSTANT)
    /**
      Get key12
    */
    QString key12() const
    {
      return mKey12;
    }

    /**
      Is key12 Immutable
    */
    bool isKey12Immutable() const
    {
      return isImmutable( QStringLiteral( "key12" ) );
    }

    /**
      Set key13
    */
    void setKey13( const QString & v )
    {
      if (v != mKey13 && !isKey13Immutable()) {
        mKey13 = v;
        Q_EMIT key13Changed();
      }
    }

    Q_PROPERTY(QString key13 READ key13 WRITE setKey13 NOTIFY key13Changed)
    Q_PROPERTY(bool isKey13Immutable READ isKey13Immutable CONSTANT)
    /**
      Get key13
    */
    QString key13() const
    {
      return mKey13;
    }

    /**
      Is key13 Immutable
    */
    bool isKey13Immutable() const
    {
      return isImmutable( QStringLiteral( "key13" ) );
    }

    /**
      Set key14
    */
    void setKey14( const QString & v )
    {
      if (v != mKey14 && !isKey14Immutable()) {
        mKey14 = v;
        Q_EMIT key14Changed();
      }
    }

    Q_PROPERTY(QString key14 READ key14 WRITE setKey14 NOTIFY key14Changed)
    Q_PROPERTY(bool isKey14Immutable READ isKey14Immutable CONSTANT)
    /**
      Get key14
    */
    QString key14() const
    {
      return mKey14;
    }

    /**
      Is key14 Immutable
    */
    bool isKey14Immutable() const
    {
      return isImmutable( QStringLiteral( "key14" ) );
    }

    /**
      Set key15
    */
    void setKey15( const QString & v )
    {
      if (v != mKey15 && !isKey15Immutable()) {
        mKey15 = v;
        Q_EMIT key15Changed();
      }
    }

    Q_PROPERTY(QString key15 READ key15 WRITE setKey15 NOTIFY key15Changed)
    Q_PROPERTY(bool isKey15Immutable READ isKey15Immutable CONSTANT)
    /**
      Get key15
    */
    QString key15() const
    {
      return mKey15;
    }

    /**
      Is key15 Immutable
    */
    bool isKey15Immutable() const
    {
      return isImmutable( QStringLiteral( "key15" ) );
    }

    /**
      Set key16
    */
    void setKey16( const QString & v )
    {
      if (v != mKey16 && !isKey16Immutable()) {
        mKey16 = v;
        Q_EMIT key16Changed();
      }
    }

    Q_PROPERTY(QString key16 READ key16 WRITE setKey16 NOTIFY key16Changed)
    Q_PROPERTY(bool isKey16Immutable READ isKey16Immutable CONSTANT)
    /**
      Get key16
    */
    QString key16() const
    {
      return mKey16;
    }

    /**
      Is key16 Immutable
    */
    bool isKey16Immutable() const
    {
      return isImmutable( QStringLiteral( "key16" ) );
    }

    /**
      Set key17
    */
    void setKey17( const QString & v )
    {
      if (v != mKey17 && !isKey17Immutable()) {
        mKey17 = v;
        Q_EMIT key17Changed();
      }
    }

    Q_PROPERTY(QString key17 READ key17 WRITE setKey17 NOTIFY key17Changed)
    Q_PROPERTY(bool isKey17Immutable READ isKey17Immutable CONSTANT)
    /**
      Get key17
    */
    QString key17() const
    {
      return mKey17;
    }

    /**
      Is key17 Immutable
    */
    bool isKey17Immutable() const
    {
      return isImmutable( QStringLiteral( "key17" ) );
    }

    /**
      Set key18
    */
    void setKey18( const QString & v )
    {
      if (v != mKey18 && !isKey18Immutable()) {
        mKey18 = v;
        Q_EMIT key18Changed();
      }
    }

    Q_PROPERTY(QString key18 READ key18 WRITE setKey18 NOTIFY key18Changed)
    Q_PROPERTY(bool isKey18Immutable READ isKey18Immutable CONSTANT)
    /**
      Get key18
    */
    QString key18() const
    {
      return mKey18;
    }

    /**
      Is key18 Immutable
    */
    bool isKey18Immutable() const
    {
      return isImmutable( QStringLiteral( "key18" ) );
    }

    /**
      Set key19
    */
    void setKey19( const QString & v )
    {
      if (v != mKey19 && !isKey19Immutable()) {
        mKey19 = v;
        Q_EMIT key19Changed();
      }
    }

    Q_PROPERTY(QString key19 READ key19 WRITE setKey19 NOTIFY key19Changed)
    Q_PROPERTY(bool isKey19Immutable READ isKey19Immutable CONSTANT)
    /**
      Get key19
    */
    QString key19() const
    {
      return mKey19;
    }

    /**
      Is key19 Immutable
    */
    bool isKey19Immutable() const
    {
      return isImmutable( QStringLiteral( "key19" ) );
    }

    /**
      Set key20
    */
    void setKey20( const QString & v )
    {
      if (v != mKey20 && !isKey20Immutable()) {
        mKey20 = v;
        Q_EMIT key20Changed();
      }
    }

    Q_PROPERTY(QString key20 READ key20 WRITE setKey20 NOTIFY key20Changed)
    Q_PROPERTY(bool isKey20Immutable READ isKey20Immutable CONSTANT)
    /**
      Get key20
    */
    QString key20() const
    {
      return mKey20;
    }

    /**
      Is key20 Immutable
    */
    bool isKey20Immutable() const
    {
      return isImmutable( QStringLiteral( "key20" ) );
    }

    /**
      Set key21
    */
    void setKey21( const QString & v )
    {
      if (v != mKey21 && !isKey21Immutable()) {
        mKey21 = v;
        Q_EMIT key21Changed();
      }
    }

    Q_PROPERTY(QString key21 READ key21 WRITE setKey21 NOTIFY key21Changed)
    Q_PROPERTY(bool isKey21Immutable READ isKey21Immutable CONSTANT)
    /**
      Get key21
    */
    QString key21() const
    {
      return mKey21;
    }

    /**
      Is key21 Immutable
    */
    bool isKey21Immutable() const
    {
      return isImmutable( QStringLiteral( "key21" ) );
    }

    /**
      Set key22
    */
    void setKey22( const QString & v )
    {
      if (v != mKey22 && !isKey22Immutable()) {
        mKey22 = v;
        Q_EMIT key22Changed();
      }
    }

    Q_PROPERTY(QString key22 READ key22 WRITE setKey22 NOTIFY key22Changed)
    Q_PROPERTY(bool isKey22Immutable READ isKey22Immutable CONSTANT)
    /**
      Get key22
    */
    QString key22() const
    {
      return mKey22;
    }

    /**
      Is key22 Immutable
    */
    bool isKey22Immutable() const
    {
      return isImmutable( QStringLiteral( "key22" ) );
    }

    /**
      Set key23
    */
    void setKey23( const QString & v )
    {
      if (v != mKey23 && !isKey23Immutable()) {
        mKey23 = v;
        Q_EMIT key23Changed();
      }
    }

    Q_PROPERTY(QString key23 READ key23 WRITE setKey23 NOTIFY key23Changed)
    Q_PROPERTY(bool isKey23Immutable READ isKey23Immutable CONSTANT)
    /**
      Get key23
    */
    QString key23() const
    {
      return mKey23;
    }

    /**
      Is key23 Immutable
    */
    bool isKey23Immutable() const
    {
      return isImmutable( QStringLiteral( "key23" ) );
    }

    /**
      Set key24
    */
    void setKey24( const QString & v )
    {
      if (v != mKey24 && !isKey24Immutable()) {
        mKey24 = v;
        Q_EMIT key24Changed();
      }
    }

    Q_PROPERTY(QString key24 READ key24 WRITE setKey24 NOTIFY key24Changed)
    Q_PROPERTY(bool isKey24Immutable READ isKey24Immutable CONSTANT)
    /**
      Get key24
    */
    QString key24() const
    {
      return mKey24;
    }

    /**
      Is key24 Immutable
    */
    bool isKey24Immutable() const
    {
      return isImmutable( QStringLiteral( "key24" ) );
    }

    /**
      Set key25
    */
    void setKey25( const QString & v )
    {
      if (v != mKey25 && !isKey25Immutable()) {
        mKey25 = v;
        Q_EMIT key25Changed();
      }
    }

    Q_PROPERTY(QString key25 READ key25 WRITE setKey25 NOTIFY key25Changed)
    Q_PROPERTY(bool isKey25Immutable READ isKey25Immutable CONSTANT)
    /**
      Get key25
    */
    QString key25() const
    {
      return mKey25;
    }

    /**
      Is key25 Immutable
    */
    bool isKey25Immutable() const
    {
      return isImmutable( QStringLiteral( "key25" ) );
    }

    /**
      Set key26
    */
    void setKey26( const QString & v )
    {
      if (v != mKey26 && !isKey26Immutable()) {
        mKey26 = v;
        Q_EMIT key26Changed();
      }
    }

    Q_PROPERTY(QString key26 READ key26 WRITE setKey26 NOTIFY key26Changed)
    Q_PROPERTY(bool isKey26Immutable READ isKey26Immutable CONSTANT)
    /**
      Get key26
    */
    QString key26() const
    {
      return mKey26;
    }

    /**
      Is key26 Immutable
    */
    bool isKey26Immutable() const
    {
      return isImmutable( QStringLiteral( "key26" ) );
    }

    /**
      Set key27
    */
    void setKey27( const QString & v )
    {
      if (v != mKey27 && !isKey27Immutable()) {
        mKey27 = v;
        Q_EMIT key27Changed();
      }
    }

    Q_PROPERTY(QString key27 READ key27 WRITE setKey27 NOTIFY key27Changed)
    Q_PROPERTY(bool isKey27Immutable READ isKey27Immutable CONSTANT)
    /**
      Get key27
    */
    QString key27() const
    {
      return mKey27;
    }

    /**
      Is key27 Immutable
    */
    bool isKey27Immutable() const
    {
      return isImmutable( QStringLiteral( "key27" ) );
    }

    /**
      Set key28
    */
    void setKey28( const QString & v )
    {
      if (v != mKey28 && !isKey28Immutable()) {
        mKey28 = v;
        Q_EMIT key28Changed();
      }
    }

    Q_PROPERTY(QString key28 READ key28 WRITE setKey28 NOTIFY key28Changed)
    Q_PROPERTY(bool isKey28Immutable READ isKey28Immutable CONSTANT)
    /**
      Get key28
    */
    QString key28() const
    {
      return mKey28;
    }

    /**
      Is key28 Immutable
    */
    bool isKey28Immutable() const
    {
      return isImmutable( QStringLiteral( "key28" ) );
    }

    /**
      Set key29
    */
    void setKey29( const QString & v )
    {
      if (v != mKey29 && !isKey29Immutable()) {
        mKey29 = v;
        Q_EMIT key29Changed();
      }
    }

    Q_PROPERTY(QString key29 READ key29 WRITE setKey29 NOTIFY key29Changed)
    Q_PROPERTY(bool isKey29Immutable READ isKey29Immutable CONSTANT)
    /**
      Get key29
    */
    QString key29() const
    {
      return mKey29;
    }

    /**
      Is key29 Immutable
    */
    bool isKey29Immutable() const
    {
      return isImmutable( QStringLiteral( "key29" ) );
    }

    /**
      Set key30
    */
    void setKey30( const QString & v )
    {
      if (v != mKey30 && !isKey30Immutable()) {
        mKey30 = v;
        Q_EMIT key30Changed();
      }
    }

    Q_PROPERTY(QString key30 READ key30 WRITE setKey30 NOTIFY key30Changed)
    Q_PROPERTY(bool isKey30Immutable READ isKey30Immutable CONSTANT)
    /**
      Get key30
    */
    QString key30() const
    {
      return mKey30;
    }

    /**
      Is key30 Immutable
    */
    bool isKey30Immutable() const
    {
      return isImmutable( QStringLiteral( "key30" ) );
    }

    /**
      Set key31
    */
    void setKey31( const QString & v )
    {
      if (v != mKey31 && !isKey31Immutable()) {
        mKey31 = v;
        Q_EMIT key31Changed();
      }
    }

    Q_PROPERTY(QString key31 READ key31 WRITE setKey31 NOTIFY key31Changed)
    Q_PROPERTY(bool isKey31Immutable READ isKey31Immutable CONSTANT)
    /**
      Get key31
    */
    QString key31() const
    {
      return mKey31;
    }

    /**
      Is key31 Immutable
    */
    bool isKey31Immutable() const
    {
      return isImmutable( QStringLiteral( "key31" ) );
    }

    /**
      Set key32
    */
    void setKey32( const QString & v )
    {
      if (v != mKey32 && !isKey32Immutable()) {
        mKey32 = v;
        Q_EMIT key32Changed();
      }
    }

    Q_PROPERTY(QString key32 READ key32 WRITE setKey32 NOTIFY key32Changed)
    Q_PROPERTY(bool isKey32Immutable READ isKey32Immutable CONSTANT)
    /**
      Get key32
    */
    QString key32() const
    {
      return mKey32;
    }

    /**
      Is key32 Immutable
    */
    bool isKey32Immutable() const
    {
      return isImmutable( QStringLiteral( "key32" ) );
    }

    /**
      Set key33
    */
    void setKey33( const QString & v )
    {
      if (v != mKey33 && !isKey33Immutable()) {
        mKey33 = v;
        Q_EMIT key33Changed();
      }
    }

    Q_PROPERTY(QString key33 READ key33 WRITE setKey33 NOTIFY key33Changed)
    Q_PROPERTY(bool isKey33Immutable READ isKey33Immutable CONSTANT)
    /**
      Get key33
    */
    QString key33() const
    {
      return mKey33;
    }

    /**
      Is key33 Immutable
    */
    bool isKey33Immutable() const
    {
      return isImmutable( QStringLiteral( "key33" ) );
    }

    /**
      Set key34
    */
    void setKey34( const QString & v )
    {
      if (v != mKey34 && !isKey34Immutable()) {
        mKey34 = v;
        Q_EMIT key34Changed();
      }
    }

    Q_PROPERTY(QString key34 READ key34 WRITE setKey34 NOTIFY key34Changed)
    Q_PROPERTY(bool isKey34Immutable READ isKey34Immutable CONSTANT)
    /**
      Get key34
    */
    QString key34() const
    {
      return mKey34;
    }

    /**
      Is key34 Immutable
    */
    bool isKey34Immutable() const
    {
      return isImmutable( QStringLiteral( "key34" ) );
    }

    /**
      Set key35
    */
    void setKey35( const QString & v )
    {
      if (v != mKey35 && !isKey35Immutable()) {
        mKey35 = v;
        Q_EMIT key35Changed();
      }
    }

    Q_PROPERTY(QString key35 READ key35 WRITE setKey35 NOTIFY key35Changed)
    Q_PROPERTY(bool isKey35Immutable READ isKey35Immutable CONSTANT)
    /**
      Get key35
    */
    QString key35() const
    {
      return mKey35;
    }

    /**
      Is key35 Immutable
    */
    bool isKey35Immutable() const
    {
      return isImmutable( QStringLiteral( "key35" ) );
    }

    /**
      Set key36
    */
    void setKey36( const QString & v )
    {
      if (v != mKey36 && !isKey36Immutable()) {
        mKey36 = v;
        Q_EMIT key36Changed();
      }
    }

    Q_PROPERTY(QString key36 READ key36 WRITE setKey36 NOTIFY key36Changed)
    Q_PROPERTY(bool isKey36Immutable READ isKey36Immutable CONSTANT)
    /**
      Get key36
    */
    QString key36() const
    {
      return mKey36;
    }

    /**
      Is key36 Immutable
    */
    bool isKey36Immutable() const
    {
      return isImmutable( QStringLiteral( "key36" ) );
    }

    /**
      Set key37
    */
    void setKey37( const QString & v )
    {
      if (v != mKey37 && !isKey37Immutable()) {
        mKey37 = v;
        Q_EMIT key37Changed();
      }
    }

    Q_PROPERTY(QString key37 READ key37 WRITE setKey37 NOTIFY key37Changed)
    Q_PROPERTY(bool isKey37Immutable READ isKey37Immutable CONSTANT)
    /**
      Get key37
    */
    QString key37() const
    {
      return mKey37;
    }

    /**
      Is key37 Immutable
    */
    bool isKey37Immutable() const
    {
      return isImmutable( QStringLiteral( "key37" ) );
    }

    /**
      Set key38
    */
    void setKey38( const QString & v )
    {
      if (v != mKey38 && !isKey38Immutable()) {
        mKey38 = v;
        Q_EMIT key38Changed();
      }
    }

    Q_PROPERTY(QString key38 READ key38 WRITE setKey38 NOTIFY key38Changed)
    Q_PROPERTY(bool isKey38Immutable READ isKey38Immutable CONSTANT)
    /**
      Get key38
    */
    QString key38() const
    {
      return mKey38;
    }

    /**
      Is key38 Immutable
    */
    bool isKey38Immutable() const
    {
      return isImmutable( QStringLiteral( "key38" ) );
    }

    /**
      Set key39
    */
    void setKey39( const QString & v )
    {
      if (v != mKey39 && !isKey39Immutable()) {
        mKey39 = v;
        Q_EMIT key39Changed();
      }
    }

    Q_PROPERTY(QString key39 READ key39 WRITE setKey39 NOTIFY key39Changed)
    Q_PROPERTY(bool isKey39Immutable READ isKey39Immutable CONSTANT)
    /**
      Get key39
    */
    QString key39() const
    {
      return mKey39;
    }

    /**
      Is key39 Immutable
    */
    bool isKey39Immutable() const
    {
      return isImmutable( QStringLiteral( "key39" ) );
    }

    /**
      Set key40
    */
    void setKey40( const QString & v )
    {
      if (v != mKey40 && !isKey40Immutable()) {
        mKey40 = v;
        Q_EMIT key40Changed();
      }
    }

    Q_PROPERTY(QString key40 READ key40 WRITE setKey40 NOTIFY key40Changed)
    Q_PROPERTY(bool isKey40Immutable READ isKey40Immutable CONSTANT)
    /**
      Get key40
    */
    QString key40() const
    {
      return mKey40;
    }

    /**
      Is key40 Immutable
    */
    bool isKey40Immutable() const
    {
      return isImmutable( QStringLiteral( "key40" ) );
    }

    /**
      Set key41
    */
    void setKey41( const QString & v )
    {
      if (v != mKey41 && !isKey41Immutable()) {
        mKey41 = v;
        Q_EMIT key41Changed();
      }
    }

    Q_PROPERTY(QString key41 READ key41 WRITE setKey41 NOTIFY key41Changed)
    Q_PROPERTY(bool isKey41Immutable READ isKey41Immutable CONSTANT)
    /**
      Get key41
    */
    QString key41() const
    {
      return mKey41;
    }

    /**
      Is key41 Immutable
    */
    bool isKey41Immutable() const
    {
      return isImmutable( QStringLiteral( "key41" ) );
    }

    /**
      Set key42
    */
    void setKey42( const QString & v )
    {
      if (v != mKey42 && !isKey42Immutable()) {
        mKey42 = v;
        Q_EMIT key42Changed();
      }
    }

    Q_PROPERTY(QString key42 READ key42 WRITE setKey42 NOTIFY key42Changed)
    Q_PROPERTY(bool isKey42Immutable READ isKey42Immutable CONSTANT)
    /**
      Get key42
    */
    QString key42() const
    {
      return mKey42;
    }

    /**
      Is key42 Immutable
    */
    bool isKey42Immutable() const
    {
      return isImmutable( QStringLiteral( "key42" ) );
    }

    /**
      Set key43
    */
    void setKey43( const QString & v )
    {
      if (v != mKey43 && !isKey43Immutable()) {
        mKey43 = v;
        Q_EMIT key43Changed();
      }
    }

    Q_PROPERTY(QString key43 READ key43 WRITE setKey43 NOTIFY key43Changed)
    Q_PROPERTY(bool isKey43Immutable READ isKey43Immutable CONSTANT)
    /**
      Get key43
    */
    QString key43() const
    {
      return mKey43;
    }

    /**
      Is key43 Immutable
    */
    bool isKey43Immutable() const
    {
      return isImmutable( QStringLiteral( "key43" ) );
    }

    /**
      Set key44
    */
    void setKey44( const QString & v )
    {
      if (v != mKey44 && !isKey44Immutable()) {
        mKey44 = v;
        Q_EMIT key44Changed();
      }
    }

    Q_PROPERTY(QString key44 READ key44 WRITE setKey44 NOTIFY key44Changed)
    Q_PROPERTY(bool isKey44Immutable READ isKey44Immutable CONSTANT)
    /**
      Get key44
    */
    QString key44() const
    {
      return mKey44;
    }

    /**
      Is key44 Immutable
    */
    bool isKey44Immutable() const
    {
      return isImmutable( QStringLiteral( "key44" ) );
    }

    /**
      Set key45
    */
    void setKey45( const QString & v )
    {
      if (v != mKey45 && !isKey45Immutable()) {
        mKey45 = v;
        Q_EMIT key45Changed();
      }
    }

    Q_PROPERTY(QString key45 READ key45 WRITE setKey45 NOTIFY key45Changed)
    Q_PROPERTY(bool isKey45Immutable READ isKey45Immutable CONSTANT)
    /**
      Get key45
    */
    QString key45() const
    {
      return mKey45;
    }

    /**
      Is key45 Immutable
    */
    bool isKey45Immutable() const
    {
      return isImmutable( QStringLiteral( "key45" ) );
    }

    /**
      Set key46
    */
    void setKey46( const QString & v )
    {
      if (v != mKey46 && !isKey46Immutable()) {
        mKey46 = v;
        Q_EMIT key46Changed();
      }
    }

    Q_PROPERTY(QString key46 READ key46 WRITE setKey46 NOTIFY key46Changed)
    Q_PROPERTY(bool isKey46Immutable READ isKey46Immutable CONSTANT)
    /**
      Get key46
    */
    QString key46() const
    {
      return mKey46;
    }

    /**
      Is key46 Immutable
    */
    bool isKey46Immutable() const
    {
      return isImmutable( QStringLiteral( "key46" ) );
    }

    /**
      Set key47
    */
    void setKey47( const QString & v )
    {
      if (v != mKey47 && !isKey47Immutable()) {
        mKey47 = v;
        Q_EMIT key47Changed();
      }
    }

    Q_PROPERTY(QString key47 READ key47 WRITE setKey47 NOTIFY key47Changed)
    Q_PROPERTY(bool isKey47Immutable READ isKey47Immutable CONSTANT)
    /**
      Get key47
    */
    QString key47() const
    {
      return mKey47;
    }

    /**
      Is key47 Immutable
    */
    bool isKey47Immutable() const
    {
      return isImmutable( QStringLiteral( "key47" ) );
    }

    /**
      Set key48
    */
    void setKey48( const QString & v )
    {
      if (v != mKey48 && !isKey48Immutable()) {
        mKey48 = v;
        Q_EMIT key48Changed();
      }
    }

    Q_PROPERTY(QString key48 READ key48 WRITE setKey48 NOTIFY key48Changed)
    Q_PROPERTY(bool isKey48Immutable READ isKey48Immutable CONSTANT)
    /**
      Get key48
    */
    QString key48() const
    {
      return mKey48;
    }

    /**
      Is key48 Immutable
    */
    bool isKey48Immutable() const
    {
      return isImmutable( QStringLiteral( "key48" ) );
    }

    /**
      Set key49
    */
    void setKey49( const QString & v )
    {
      if (v != mKey49 && !isKey49Immutable()) {
        mKey49 = v;
        Q_EMIT key49Changed();
      }
    }

    Q_PROPERTY(QString key49 READ key49 WRITE setKey49 NOTIFY key49Changed)
    Q_PROPERTY(bool isKey49Immutable READ isKey49Immutable CONSTANT)
    /**
      Get key49
    */
    QString key49() const
    {
      return mKey49;
    }

    /**
      Is key49 Immutable
    */
    bool isKey49Immutable() const
    {
      return isImmutable( QStringLiteral( "key49" ) );
    }

    /**
      Set key50
    */
    void setKey50( const QString & v )
    {
      if (v != mKey50 && !isKey50Immutable()) {
        mKey50 = v;
        Q_EMIT key50Changed();
      }
    }

    Q_PROPERTY(QString key50 READ key50 WRITE setKey50 NOTIFY key50Changed)
    Q_PROPERTY(bool isKey50Immutable READ isKey50Immutable CONSTANT)
    /**
      Get key50
    */
    QString key50() const
    {
      return mKey50;
    }

    /**
      Is key50 Immutable
    */
    bool isKey50Immutable() const
    {
      return isImmutable( QStringLiteral( "key50" ) );
    }

    /**
      Set key51
    */
    void setKey51( const QString & v )
    {
      if (v != mKey51 && !isKey51Immutable()) {
        mKey51 = v;
        Q_EMIT key51Changed();
      }
    }

    Q_PROPERTY(QString key51 READ key51 WRITE setKey51 NOTIFY key51Changed)
    Q_PROPERTY(bool isKey51Immutable READ isKey51Immutable CONSTANT)
    /**
      Get key51
    */
    QString key51() const
    {
      return mKey51;
    }

    /**
      Is key51 Immutable
    */
    bool isKey51Immutable() const
    {
      return isImmutable( QStringLiteral( "key51" ) );
    }

    /**
      Set key52
    */
    void setKey52( const QString & v )
    {
      if (v != mKey52 && !isKey52Immutable()) {
        mKey52 = v;
        Q_EMIT key52Changed();
      }
    }

    Q_PROPERTY(QString key52 READ key52 WRITE setKey52 NOTIFY key52Changed)
    Q_PROPERTY(bool isKey52Immutable READ isKey52Immutable CONSTANT)
    /**
      Get key52
    */
    QString key52() const
    {
      return mKey52;
    }

    /**
      Is key52 Immutable
    */
    bool isKey52Immutable() const
    {
      return isImmutable( QStringLiteral( "key52" ) );
    }

    /**
      Set key53
    */
    void setKey53( const QString & v )
    {
      if (v != mKey53 && !isKey53Immutable()) {
        mKey53 = v;
        Q_EMIT key53Changed();
      }
    }

    Q_PROPERTY(QString key53 READ key53 WRITE setKey53 NOTIFY key53Changed)
    Q_PROPERTY(bool isKey53Immutable READ isKey53Immutable CONSTANT)
    /**
      Get key53
    */
    QString key53() const
    {
      return mKey53;
    }

    /**
      Is key53 Immutable
    */
    bool isKey53Immutable() const
    {
      return isImmutable( QStringLiteral( "key53" ) );
    }

    /**
      Set key54
    */
    void setKey54( const QString & v )
    {
      if (v != mKey54 && !isKey54Immutable()) {
        mKey54 = v;
        Q_EMIT key54Changed();
      }
    }

    Q_PROPERTY(QString key54 READ key54 WRITE setKey54 NOTIFY key54Changed)
    Q_PROPERTY(bool isKey54Immutable READ isKey54Immutable CONSTANT)
    /**
      Get key54
    */
    QString key54() const
    {
      return mKey54;
    }

    /**
      Is key54 Immutable
    */
    bool isKey54Immutable() const
    {
      return isImmutable( QStringLiteral( "key54" ) );
    }

    /**
      Set key55
    */
    void setKey55( const QString & v )
    {
      if (v != mKey55 && !isKey55Immutable()) {
        mKey55 = v;
        Q_EMIT key55Changed();
      }
    }

    Q_PROPERTY(QString key55 READ key55 WRITE setKey55 NOTIFY key55Changed)
    Q_PROPERTY(bool isKey55Immutable READ isKey55Immutable CONSTANT)
    /**
      Get key55
    */
    QString key55() const
    {
      return mKey55;
    }

    /**
      Is key55 Immutable
    */
    bool isKey55Immutable() const
    {
      return isImmutable( QStringLiteral( "key55" ) );
    }

    /**
      Set key56
    */
    void setKey56( const QString & v )
    {
      if (v != mKey56 && !isKey56Immutable()) {
        mKey56 = v;
        Q_EMIT key56Changed();
      }
    }

    Q_PROPERTY(QString key56 READ key56 WRITE setKey56 NOTIFY key56Changed)
    Q_PROPERTY(bool isKey56Immutable READ isKey56Immutable CONSTANT)
    /**
      Get key56
    */
    QString key56() const
    {
      return mKey56;
    }

    /**
      Is key56 Immutable
    */
    bool isKey56Immutable() const
    {
      return isImmutable( QStringLiteral( "key56" ) );
    }

    /**
      Set key57
    */
    void setKey57( const QString & v )
    {
      if (v != mKey57 && !isKey57Immutable()) {
        mKey57 = v;
        Q_EMIT key57Changed();
      }
    }

    Q_PROPERTY(QString key57 READ key57 WRITE setKey57 NOTIFY key57Changed)
    Q_PROPERTY(bool isKey57Immutable READ isKey57Immutable CONSTANT)
    /**
      Get key57
    */
    QString key57() const
    {
      return mKey57;
    }

    /**
      Is key57 Immutable
    */
    bool isKey57Immutable() const
    {
      return isImmutable( QStringLiteral( "key57" ) );
    }

    /**
      Set key58
    */
    void setKey58( const QString & v )
    {
      if (v != mKey58 && !isKey58Immutable()) {
        mKey58 = v;
        Q_EMIT key58Changed();
      }
    }

    Q_PROPERTY(QString key58 READ key58 WRITE setKey58 NOTIFY key58Changed)
    Q_PROPERTY(bool isKey58Immutable READ isKey58Immutable CONSTANT)
    /**
      Get key58
    */
    QString key58() const
    {
      return mKey58;
    }

    /**
      Is key58 Immutable
    */
    bool isKey58Immutable() const
    {
      return isImmutable( QStringLiteral( "key58" ) );
    }

    /**
      Set key59
    */
    void setKey59( const QString & v )
    {
      if (v != mKey59 && !isKey59Immutable()) {
        mKey59 = v;
        Q_EMIT key59Changed();
      }
    }

    Q_PROPERTY(QString key59 READ key59 WRITE setKey59 NOTIFY key59Changed)
    Q_PROPERTY(bool isKey59Immutable READ isKey59Immutable CONSTANT)
    /**
      Get key59
    */
    QString key59() const
    {
      return mKey59;
    }

    /**
      Is key59 Immutable
    */
    bool isKey59Immutable() const
    {
      return isImmutable( QStringLiteral( "key59" ) );
    }

    /**
      Set key60
    */
    void setKey60( const QString & v )
    {
      if (v != mKey60 && !isKey60Immutable()) {
        mKey60 = v;
        Q_EMIT key60Changed();
      }
    }

    Q_PROPERTY(QString key60 READ key60 WRITE setKey60 NOTIFY key60Changed)
    Q_PROPERTY(bool isKey60Immutable READ isKey60Immutable CONSTANT)
    /**
      Get key60
    */
    QString key60() const
    {
      return mKey60;
    }

    /**
      Is key60 Immutable
    */
    bool isKey60Immutable() const
    {
      return isImmutable( QStringLiteral( "key60" ) );
    }

    /**
      Set key61
    */
    void setKey61( const QString & v )
    {
      if (v != mKey61 && !isKey61Immutable()) {
        mKey61 = v;
        Q_EMIT key61Changed();
      }
    }

    Q_PROPERTY(QString key61 READ key61 WRITE setKey61 NOTIFY key61Changed)
    Q_PROPERTY(bool isKey61Immutable READ isKey61Immutable CONSTANT)
    /**
      Get key61
    */
    QString key61() const
    {
      return mKey61;
    }

    /**
      Is key61 Immutable
    */
    bool isKey61Immutable() const
    {
      return isImmutable( QStringLiteral( "key61" ) );
    }

    /**
      Set key62
    */
    void setKey62( const QString & v )
    {
      if (v != mKey62 && !isKey62Immutable()) {
        mKey62 = v;
        Q_EMIT key62Changed();
      }
    }

    Q_PROPERTY(QString key62 READ key62 WRITE setKey62 NOTIFY key62Changed)
    Q_PROPERTY(bool isKey62Immutable READ isKey62Immutable CONSTANT)
    /**
      Get key62
    */
    QString key62() const
    {
      return mKey62;
    }

    /**
      Is key62 Immutable
    */
    bool isKey62Immutable() const
    {
      return isImmutable( QStringLiteral( "key62" ) );
    }

    /**
      Set key63
    */
    void setKey63( const QString & v )
    {
      if (v != mKey63 && !isKey63Immutable()) {
        mKey63 = v;
        Q_EMIT key63Changed();
      }
    }

    Q_PROPERTY(QString key63 READ key63 WRITE setKey63 NOTIFY key63Changed)
    Q_PROPERTY(bool isKey63Immutable READ isKey63Immutable CONSTANT)
    /**
      Get key63
    */
    QString key63() const
    {
      return mKey63;
    }

    /**
      Is key63 Immutable
    */
    bool isKey63Immutable() const
    {
      return isImmutable( QStringLiteral( "key63" ) );
    }

    /**
      Set key64
    */
    void setKey64( const QString & v )
    {
      if (v != mKey64 && !isKey64Immutable()) {
        mKey64 = v;
        Q_EMIT key64Changed();
      }
    }

    Q_PROPERTY(QString key64 READ key64 WRITE setKey64 NOTIFY key64Changed)
    Q_PROPERTY(bool isKey64Immutable READ isKey64Immutable CONSTANT)
    /**
      Get key64
    */
    QString key64() const
    {
      return mKey64;
    }

    /**
      Is key64 Immutable
    */
    bool isKey64Immutable() const
    {
      return isImmutable( QStringLiteral( "key64" ) );
    }


    enum {
      signalKey1Changed = 0x1,
      signalKey2Changed = 0x2,
      signalKey3Changed = 0x4,
      signalKey4Changed = 0x8,
      signalKey5Changed = 0x10,
      signalKey6Changed = 0x20,
      signalKey7Changed = 0x40,
      signalKey8Changed = 0x80,
      signalKey9Changed = 0x100,
      signalKey10Changed = 0x200,
      signalKey11Changed = 0x400,
      signalKey12Changed = 0x800,
      signalKey13Changed = 0x1000,
      signalKey14Changed = 0x2000,
      signalKey15Changed = 0x4000,
      signalKey16Changed = 0x8000,
      signalKey17Changed = 0x10000,
      signalKey18Changed = 0x20000,
      signalKey19Changed = 0x40000,
      signalKey20Changed = 0x80000,
      signalKey21Changed = 0x100000,
      signalKey22Changed = 0x200000,
      signalKey23Changed = 0x400000,
      signalKey24Changed = 0x800000,
      signalKey25Changed = 0x1000000,
      signalKey26Changed = 0x2000000,
      signalKey27Changed = 0x4000000,
      signalKey28Changed = 0x8000000,
      signalKey29Changed = 0x10000000,
      signalKey30Changed = 0x20000000,
      signalKey31Changed = 0x40000000,
      signalKey32Changed = 0x80000000,
      signalKey33Changed = 0x100000000,
      signalKey34Changed = 0x200000000,
      signalKey35Changed = 0x400000000,
      signalKey36Changed = 0x800000000,
      signalKey37Changed = 0x1000000000,
      signalKey38Changed = 0x2000000000,
      signalKey39Changed = 0x4000000000,
      signalKey40Changed = 0x8000000000,
      signalKey41Changed = 0x10000000000,
      signalKey42Changed = 0x20000000000,
      signalKey43Changed = 0x40000000000,
      signalKey44Changed = 0x80000000000,
      signalKey45Changed = 0x100000000000,
      signalKey46Changed = 0x200000000000,
      signalKey47Changed = 0x400000000000,
      signalKey48Changed = 0x800000000000,
      signalKey49Changed = 0x1000000000000,
      signalKey50Changed = 0x2000000000000,
      signalKey51Changed = 0x4000000000000,
      signalKey52Changed = 0x8000000000000,
      signalKey53Changed = 0x10000000000000,
      signalKey54Changed = 0x20000000000000,
      signalKey55Changed = 0x40000000000000,
      signalKey56Changed = 0x80000000000000,
      signalKey57Changed = 0x100000000000000,
      signalKey58Changed = 0x200000000000000,
      signalKey59Changed = 0x400000000000000,
      signalKey60Changed = 0x800000000000000,
      signalKey61Changed = 0x1000000000000000,
      signalKey62Changed = 0x2000000000000000,
      signalKey63Changed = 0x4000000000000000,
      signalKey64Changed = 0x8000000000000000
    };

  Q_SIGNALS:
    void key1Changed();

    void key2Changed();

    void key3Changed();

    void key4Changed();

    void key5Changed();

    void key6Changed();

    void key7Changed();

    void key8Changed();

    void key9Changed();

    void key10Changed();

    void key11Changed();

    void key12Changed();

    void key13Changed();

    void key14Changed();

    void key15Changed();

    void key16Changed();

    void key17Changed();

    void key18Changed();

    void key19Changed();

    void key20Changed();

    void key21Changed();

    void key22Changed();

    void key23Changed();

    void key24Changed();

    void key25Changed();

    void key26Changed();

    void key27Changed();

    void key28Changed();

    void key29Changed();

    void key30Changed();

    void key31Changed();

    void key32Changed();

    void key33Changed();

    void key34Changed();

    void key35Changed();

    void key36Changed();

    void key37Changed();

    void key38Changed();

    void key39Changed();

    void key40Changed();

    void key41Changed();

    void key42Changed();

    void key43Changed();

    void key44Changed();

    void key45Changed();

    void key46Changed();

    void key47Changed();

    void key48Changed();

    void key49Changed();

    void key50Changed();

    void key51Changed();

    void key52Changed();

    void key53Changed();

    void key54Changed();

    void key55Changed();

    void key56Changed();

    void key57Changed();

    void key58Changed();

    void key59Changed();

    void key60Changed();

    void key61Changed();

    void key62Changed();

    void key63Changed();

    void key64Changed();

  private:
    void itemChanged(quint64 flags);

  protected:

    // Foo
    QString mKey1;
    QString mKey2;
    QString mKey3;
    QString mKey4;
    QString mKey5;
    QString mKey6;
    QString mKey7;
    QString mKey8;
    QString mKey9;
    QString mKey10;
    QString mKey11;
    QString mKey12;
    QString mKey13;
    QString mKey14;
    QString mKey15;
    QString mKey16;
    QString mKey17;
    QString mKey18;
    QString mKey19;
    QString mKey20;
    QString mKey21;
    QString mKey22;
    QString mKey23;
    QString mKey24;
    QString mKey25;
    QString mKey26;
    QString mKey27;
    QString mKey28;
    QString mKey29;
    QString mKey30;
    QString mKey31;
    QString mKey32;
    QString mKey33;
    QString mKey34;
    QString mKey35;
    QString mKey36;
    QString mKey37;
    QString mKey38;
    QString mKey39;
    QString mKey40;
    QString mKey41;
    QString mKey42;
    QString mKey43;
    QString mKey44;
    QString mKey45;
    QString mKey46;
    QString mKey47;
    QString mKey48;
    QString mKey49;
    QString mKey50;
    QString mKey51;
    QString mKey52;
    QString mKey53;
    QString mKey54;
    QString mKey55;
    QString mKey56;
    QString mKey57;
    QString mKey58;
    QString mKey59;
    QString mKey60;
    QString mKey61;
    QString mKey62;
    QString mKey63;
    QString mKey64;

  private:
};

#endif

